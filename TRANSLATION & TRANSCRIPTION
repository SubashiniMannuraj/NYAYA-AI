import speech_recognition as sr
from googletrans import Translator
from gtts import gTTS
import tkinter as tk
from tkinter import scrolledtext
import threading
import pygame
import io

# Initialize recognizer and translator
r = sr.Recognizer()
translator = Translator(service_urls=['translate.google.com'])


# Initialize pygame mixer for audio playback
pygame.mixer.init()

# Supported languages
LANGUAGES = {
    "Tamil": "ta-IN",
    "Telugu": "te-IN",
    "Hindi": "hi-IN",
    "Malayalam": "ml-IN",
    "Bengali": "bn-IN",
    "Gujarati": "gu-IN",
    "Kannada": "kn-IN",
    "Marathi": "mr-IN",
    "Punjabi": "pa-IN",
    "Urdu": "ur-IN",
    "Assamese": "as-IN",
    "Odia": "or-IN",
    "Konkani": "kok-IN",
    "Maithili": "mai-IN",
    "Santali": "sat-IN",
    "Nepali": "ne-IN",
    "Sindhi": "sd-IN",
    "Kashmiri": "ks-IN",
    "Dogri": "doi-IN",
    "Manipuri (Meitei)": "mni-IN",
    "Sanskrit": "sa-IN",
    "Bodo": "brx-IN",
    "Tulu": "tcy-IN",
    "English": "en-IN"
}

def update_ui(message, is_special=False):
    """ Update UI elements in a thread-safe manner. """
    root.after(0, lambda: _update_ui(message, is_special))

def _update_ui(message, is_special=False):
    """ Internal function to update the UI. """
    if is_special:
        special_message_label.config(text=message)
        special_message_label.pack(pady=10)
        text_area.pack_forget()
    else:
        special_message_label.pack_forget()
        text_area.insert(tk.END, message + "\n")
        text_area.yview(tk.END)

def play_audio(audio_data):
    """ Play audio from a byte stream using pygame. """
    with open("temp_audio.mp3", "wb") as f:
        f.write(audio_data)
    pygame.mixer.music.load("temp_audio.mp3")
    pygame.mixer.music.play()

def recognition_thread():
    """ Speech recognition and translation loop. """
    selected_source_lang = LANGUAGES[selected_source_language.get()]
    selected_dest_lang = LANGUAGES[selected_destination_language.get()]
    
    update_ui("Listening for speech...")

    while True:
        with sr.Microphone() as source:
            update_ui("Adjusting for ambient noise...")
            r.adjust_for_ambient_noise(source)
            update_ui("Listening...")
            audio = r.listen(source)

        try:
            text = r.recognize_google(audio, language=selected_source_lang)
            update_ui(f"Recognized text ({selected_source_language.get()}): {text}")

            # Translate to the destination language
            translation = translator.translate(text, src=selected_source_lang.split('-')[0], dest=selected_dest_lang.split('-')[0])
            translated_text = translation.text
            update_ui(f"Translated to {selected_destination_language.get()}: {translated_text}")

            # Convert translated text to speech
            tts = gTTS(text=translated_text, lang=selected_dest_lang.split('-')[0])
            audio_data = io.BytesIO()
            tts.write_to_fp(audio_data)
            audio_data.seek(0)
            
            # Play the audio
            play_audio(audio_data.read())

        except sr.UnknownValueError:
            update_ui("Google Speech Recognition could not understand audio")
        except sr.RequestError as e:
            update_ui(f"Error with Google Speech Recognition service: {e}")
        except Exception as e:
            update_ui(f"An unexpected error occurred: {e}")

        # Stop condition
        if text and text.lower() == "stop":
            update_ui("Exiting...")
            break

def text_to_speech_thread():
    """ Converts input text to translated speech and plays it. """
    selected_text_source_lang = LANGUAGES[selected_text_source_language.get()]
    selected_text_dest_lang = LANGUAGES[selected_text_destination_language.get()]
    
    input_text = text_input_area.get("1.0", tk.END).strip()

    try:
        translation = translator.translate(input_text, src=selected_text_source_lang.split('-')[0], dest=selected_text_dest_lang.split('-')[0])
        translated_text = translation.text
        update_ui(f"Text translated to {selected_text_destination_language.get()}: {translated_text}")

        # Convert translated text to speech
        tts = gTTS(text=translated_text, lang=selected_text_dest_lang.split('-')[0])
        audio_data = io.BytesIO()
        tts.write_to_fp(audio_data)
        audio_data.seek(0)
        
        play_audio(audio_data.read())

    except Exception as e:
        update_ui(f"An unexpected error occurred in text-to-speech: {e}")

# GUI setup
root = tk.Tk()
root.title("Voice Recognition and Translation System")
root.geometry("600x800")
root.configure(bg='#D0F0C0')

title_label = tk.Label(root, text="Voice Recognition and Translation System", font=("Arial", 16, "bold"), bg='#F5F5DC', fg='#4B0082')
title_label.pack(pady=10)

selected_source_language = tk.StringVar(value="Tamil")
source_language_menu = tk.OptionMenu(root, selected_source_language, *LANGUAGES.keys())
source_language_menu.pack(pady=5)

selected_destination_language = tk.StringVar(value="English")
destination_language_menu = tk.OptionMenu(root, selected_destination_language, *LANGUAGES.keys())
destination_language_menu.pack(pady=5)

text_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, height=8, width=60, bg='#FAFAD2', font=("Arial", 10))
text_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

special_message_label = tk.Label(root, text="", font=("Arial", 18, "bold"), bg='#F5F5DC', fg='#FF0000')

text_input_label = tk.Label(root, text="Enter Text for Translation and Speech:", font=("Arial", 12), bg='#F5F5DC')
text_input_label.pack(pady=5)
text_input_area = scrolledtext.ScrolledText(root, wrap=tk.WORD, height=5, width=60, bg='#FAFAD2', font=("Arial", 10))
text_input_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

selected_text_source_language = tk.StringVar(value="Tamil")
text_source_language_menu = tk.OptionMenu(root, selected_text_source_language, *LANGUAGES.keys())
text_source_language_menu.pack(pady=5)

selected_text_destination_language = tk.StringVar(value="English")
text_destination_language_menu = tk.OptionMenu(root, selected_text_destination_language, *LANGUAGES.keys())
text_destination_language_menu.pack(pady=5)

text_to_speech_button = tk.Button(root, text="Convert Text to Speech", font=("Arial", 12), bg='#32CD32', fg='white', relief=tk.RAISED, command=lambda: threading.Thread(target=text_to_speech_thread, daemon=True).start())
text_to_speech_button.pack(pady=5)

start_button = tk.Button(root, text="Start Speech Recognition", font=("Arial", 12), bg='#32CD32', fg='white', relief=tk.RAISED, command=lambda: threading.Thread(target=recognition_thread, daemon=True).start())
start_button.pack(pady=5)

root.mainloop()
